name: Build images 📦

on:
  workflow_dispatch:
    inputs:
      architectures:
        description: As GitHub Actions doesn't support globals and/or arrays, you must pass this as an string, like '["amd64", "arm64"]'
        required: false
        type: string
        default: '["amd64", "arm64"]'
      images:
        description: As GitHub Actions doesn't support globals and/or arrays, you must pass this as an string, like '["debian", "gphotosdl"]'
        required: false
        type: string
        default: '["debian", "gphotosdl"]'
      push:
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  attestations: write
    
env:
  DOCKER_BUILD_RECORD_UPLOAD: false

jobs:
  prepare:
    name: Prepare Docker build variables 🏷️🐳
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ env.platforms }}
      caches: ${{ env.caches }}
    
    steps:
      - name: Generate platform array 🖥️📝
        run: |
          PARSED_ARRAY=$(echo '${{ inputs.architectures }}' | jq '. | map("linux/" + .) | .[]' | tr -d '"')
          echo "platforms<<EOF" >> $GITHUB_ENV
          echo "$PARSED_ARRAY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate cache array 💾📝
        run: |
          ARCHS=$(echo '${{ inputs.architectures }}' | jq -c '.')
          IMGS=$(echo '${{ inputs.images }}' | jq -c '.')
          PARSED_ARRAY=$(echo "$ARCHS" "$IMGS" | jq -s '.[0] as $archs | .[1] as $imgs | $archs | map(. as $arch | $imgs | map("type=local,mode=min,src=/tmp/${{ github.repository_owner }}/" + . + "/cache/" + . + "-buildx-" + $arch)) | flatten | .[]' | tr -d '"')
          echo "caches<<EOF" >> $GITHUB_ENV
          echo "$PARSED_ARRAY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
  
  docker:
    name: Docker image ${{ matrix.image }} for ${{ matrix.platform }} 💿🐳
    runs-on: ${{ contains(matrix.platform, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.architectures) }}
        image: ${{ fromJson(inputs.images) }}

    env:
      ARTIFACT_NAME: ${{ matrix.image }}-linux_${{ matrix.platform }}
      CACHE_PATH: /tmp/${{ github.repository_owner }}/${{ matrix.image }}/cache/${{ matrix.platform }}
      CACHE_STRING: type=local,mode=min,dest=

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v4.2.2
        with:
          show-progress: false

      - name: Configure QEMU ⚙️
        uses: docker/setup-qemu-action@v3.6.0

      - name: Configure Docker Buildx ⚙️
        uses: docker/setup-buildx-action@v3.10.0
        with:
          cleanup: false
          version: latest

      - name: Build images 🛠️
        uses: docker/build-push-action@v6.15.0
        id: image
        with:
          context: .
          file: ${{ matrix.image }}.Dockerfile
          platforms: ${{ format('linux/{0}', matrix.platform) }}
          no-cache: true
          cache-to: ${{ env.CACHE_STRING }}${{ env.CACHE_PATH }}
          outputs: type=docker,dest=docker_image.tar
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}

      - name: Upload Docker image as artifact ⬆️📦
        uses: actions/upload-artifact@v4.6.2
        id: artifact
        with:
          compression-level: 0
          name: ${{ env.ARTIFACT_NAME }}
          path: docker_image.tar

      - name: Create provenance attestation 🔏
        uses: actions/attest-build-provenance@v2.2.3
        continue-on-error: true
        with:
          subject-name: ${{ env.ARTIFACT_NAME }}
          subject-digest: sha256:${{ steps.artifact.outputs.artifact-digest }}            

      - name: Upload cache artifact ⬆️⚙️
        uses: actions/upload-artifact@v4.6.2
        if: ${{ inputs.push }}
        with:
          compression-level: 0
          name: ${{ matrix.image}}-buildx-${{ matrix.platform }}
          path: ${{ env.CACHE_PATH }}

  docker_merge:
    name: Merge Docker images of ${{ matrix.image }} 💿🐳
    runs-on: ubuntu-latest
    if: ${{ inputs.push }}
    needs:
      - prepare
      - docker
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(inputs.images) }}

    steps:
      - name: Download cache artifacts 📦⬇️
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: ${{ matrix.image }}-buildx-*
          path: /tmp/${{ github.repository_owner }}/${{ matrix.image }}/cache/
  
      - name: Checkout ⬇️
        uses: actions/checkout@v4.2.2
        with:
          show-progress: false

      - name: Configure QEMU ⚙️
        uses: docker/setup-qemu-action@v3.6.0

      - name: Configure Docker Buildx ⚙️
        uses: docker/setup-buildx-action@v3.10.0
        with:
          cleanup: false
          version: latest

      - name: Login to GitHub Container Registry 🔑
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Create multiplatform image ${{ inputs.push && 'and push 🛠️⬆️' || '🛠️' }} 
        uses: docker/build-push-action@v6.15.0
        id: image
        with:
          context: .
          file: ${{ matrix.image }}.Dockerfile
          push: true
          provenance: mode=max
          sbom: true
          cache-from: |
            ${{ needs.prepare.outputs.caches }}
          platforms: |
            ${{ needs.prepare.outputs.platforms }}
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}

      - name: Remove cache artifacts 🗑️
        uses: geekyeggo/delete-artifact@v5.1.0
        continue-on-error: true
        with:
          name: |
            ${{ matrix.image }}-buildx-*
